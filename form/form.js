var Form,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Form = (function() {
  var ERROR, IDLE, LOADING, SUCCESS, handler, status;

  Form.prototype.name = "form";

  function Form(_at_options) {
    this.options = _at_options != null ? _at_options : {};
    this.initialize = __bind(this.initialize, this);
    if (Template[this.name]) {
      
      this.initialize();
      
    } else {
      $.holdReady(true);
      $.get(this.name + ".tmp", (function(_this) {
        return function(templateSource) {

          $("head").prepend($('<script name="' + _this.name + '" type="text/spacebars">'+templateSource+'</script>'))
          
          // var renderFuncCode;
          // renderFuncCode = SpacebarsCompiler.compile(templateSource, {
          //   isTemplate: true
          // });
          // Template.__define__(_this.name, eval(renderFuncCode));
          Blaze.compileTemplates()
                    
          $(document).on("spacebarsReady", function() {

            return _this.initialize();
          });
          return $.holdReady(false);
        };
      })(this));
    }
  }

  Form.prototype.initialize = function() {
    console.log(this)
    Template[this.name].helpers(this.helpers);
    return Template[this.name].events(this.events);
  };

  Form.prototype.helpers = {
    status: function() {
      console.log("HELLO")
      return status.get();
    }
  };

  Form.prototype.events = {
    "submit": function(e,t) {
      console.log(e)
      e.preventDefault();
      return $.ajax({
        type: t.$el.attr("method"),
        url: t.$el.attr("action"),
        data: t.$el.toJSON(),
        beforeSend: handler(LOADING, Form.options.before),
        error: handler(ERROR, Form.options.error),
        success: handler(SUCCESS, Form.options.success)
      });
    },
    "reset": function(e,t) {
      return e.preventDefault();
    }
  };

  IDLE = "idle";

  LOADING = "loading";

  SUCCESS = "success";

  ERROR = "error";

  status = new Blaze.Var(IDLE);

  handler = function(status, callback) {
    return function() {
      status.set(status);
      if (typeof callback === "function") {
        return callback(args);
      }
    };
  };

  return Form;

})();

// ---
// generated by coffee-script 1.9.0